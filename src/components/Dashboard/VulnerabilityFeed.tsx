
import React, { useState } from 'react';
import { AlertTriangle, CheckCircle, XCircle, ClockIcon, Filter, ChevronUp, ChevronDown, Eye } from 'lucide-react';
import VulnerabilityDetails from './VulnerabilityDetails';
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

// Define types and export them for reuse
export type RiskLevel = 'critical' | 'high' | 'medium' | 'low' | 'info';
export type VulnerabilityStatus = 'new' | 'verified' | 'fixed' | 'rejected';

export type Report = {
  id: string;
  title: string;
  company: string;
  risk_level: RiskLevel;
  status: VulnerabilityStatus;
  submitter_name: string;
  created_at: string;
  description: string;
};

interface VulnerabilityFeedProps {
  reports: Report[];
  isLoading: boolean;
}

const VulnerabilityFeed: React.FC<VulnerabilityFeedProps> = ({ reports, isLoading }) => {
  const [sortField, setSortField] = useState<keyof Report>('created_at');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [filterRisk, setFilterRisk] = useState<RiskLevel | 'all'>('all');
  const [filterStatus, setFilterStatus] = useState<VulnerabilityStatus | 'all'>('all');
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  
  const handleSort = (field: keyof Report) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };
  
  const handleViewDetails = (report: Report) => {
    setSelectedReport(report);
    setIsDetailsOpen(true);
  };
  
  const handleStatusUpdate = () => {
    // Trigger a refresh
    setRefreshTrigger(prev => prev + 1);
    setIsDetailsOpen(false);
  };
  
  // Filter and sort vulnerabilities
  const filteredReports = reports
    .filter(report => filterRisk === 'all' || report.risk_level === filterRisk)
    .filter(report => filterStatus === 'all' || report.status === filterStatus)
    .sort((a, b) => {
      if (sortField === 'created_at') {
        return sortDirection === 'asc' 
          ? new Date(a[sortField]).getTime() - new Date(b[sortField]).getTime()
          : new Date(b[sortField]).getTime() - new Date(a[sortField]).getTime();
      }
      
      if (a[sortField] < b[sortField]) return sortDirection === 'asc' ? -1 : 1;
      if (a[sortField] > b[sortField]) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });

  return (
    <div className="cyber-panel">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-4">
        <h2 className="text-xl font-bold text-white flex items-center">
          <AlertTriangle className="h-5 w-5 text-cyber-teal mr-2" />
          Vulnerability Feed
        </h2>
        
        <div className="flex flex-wrap gap-2">
          <div className="relative">
            <select
              value={filterRisk}
              onChange={(e) => setFilterRisk(e.target.value as RiskLevel | 'all')}
              className="cyber-input py-1 pl-8 pr-3 text-sm"
            >
              <option value="all">All Risks</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
              <option value="info">Info</option>
            </select>
            <Filter className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-cyber-teal" />
          </div>
          
          <div className="relative">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as VulnerabilityStatus | 'all')}
              className="cyber-input py-1 pl-8 pr-3 text-sm"
            >
              <option value="all">All Status</option>
              <option value="new">New</option>
              <option value="verified">Verified</option>
              <option value="fixed">Fixed</option>
              <option value="rejected">Rejected</option>
            </select>
            <Filter className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-cyber-teal" />
          </div>
        </div>
      </div>
      
      <div className="overflow-x-auto">
        <table className="w-full cyber-grid">
          <thead>
            <tr className="cyber-grid-header text-left">
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider" onClick={() => handleSort('title')}>
                <div className="flex items-center cursor-pointer">
                  <span>Title</span>
                  {sortField === 'title' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </span>
                  )}
                </div>
              </th>
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider" onClick={() => handleSort('risk_level')}>
                <div className="flex items-center cursor-pointer">
                  <span>Risk</span>
                  {sortField === 'risk_level' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </span>
                  )}
                </div>
              </th>
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider" onClick={() => handleSort('status')}>
                <div className="flex items-center cursor-pointer">
                  <span>Status</span>
                  {sortField === 'status' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </span>
                  )}
                </div>
              </th>
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider" onClick={() => handleSort('company')}>
                <div className="flex items-center cursor-pointer">
                  <span>Company</span>
                  {sortField === 'company' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </span>
                  )}
                </div>
              </th>
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider" onClick={() => handleSort('created_at')}>
                <div className="flex items-center cursor-pointer">
                  <span>Date</span>
                  {sortField === 'created_at' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </span>
                  )}
                </div>
              </th>
              <th className="py-2 px-4 font-medium text-xs uppercase tracking-wider">
                <span>Actions</span>
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-cyber-teal/20">
            {isLoading ? (
              <tr>
                <td colSpan={6} className="py-4 px-4 text-center">
                  <div className="flex justify-center py-4">
                    <div className="animate-spin h-6 w-6 border-4 border-cyber-teal border-t-transparent rounded-full"></div>
                  </div>
                </td>
              </tr>
            ) : filteredReports.length > 0 ? (
              filteredReports.map((report) => (
                <tr key={report.id} className="cyber-grid-row">
                  <td className="py-3 px-4">
                    <div className="font-medium text-white">{report.title}</div>
                  </td>
                  <td className="py-3 px-4">
                    <RiskBadge risk={report.risk_level} />
                  </td>
                  <td className="py-3 px-4">
                    <StatusBadge status={report.status} />
                  </td>
                  <td className="py-3 px-4">
                    <div className="text-gray-300">{report.company}</div>
                  </td>
                  <td className="py-3 px-4">
                    <div className="text-gray-400 flex items-center">
                      <ClockIcon className="h-3 w-3 mr-1" />
                      {new Date(report.created_at).toLocaleDateString()}
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <Button 
                      size="sm" 
                      variant="ghost" 
                      className="text-cyber-teal hover:bg-cyber-teal/10"
                      onClick={() => handleViewDetails(report)}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={6} className="py-4 px-4 text-center text-gray-400">
                  No vulnerabilities found
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      
      {/* Vulnerability details dialog */}
      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
        <DialogContent className="bg-cyber-dark border border-cyber-teal/30 p-0 max-w-4xl w-[95vw]">
          {selectedReport && (
            <VulnerabilityDetails 
              report={selectedReport} 
              onClose={() => setIsDetailsOpen(false)} 
              onStatusUpdate={handleStatusUpdate}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

interface RiskBadgeProps {
  risk: RiskLevel;
}

const RiskBadge: React.FC<RiskBadgeProps> = ({ risk }) => {
  const colorMap = {
    critical: 'bg-cyber-red/20 text-cyber-red border-cyber-red/30',
    high: 'bg-cyber-orange/20 text-cyber-orange border-cyber-orange/30',
    medium: 'bg-cyber-yellow/20 text-cyber-yellow border-cyber-yellow/30',
    low: 'bg-cyber-blue/20 text-cyber-blue border-cyber-blue/30',
    info: 'bg-cyber-teal/20 text-cyber-teal border-cyber-teal/30',
  };

  return (
    <span className={`${colorMap[risk]} text-xs font-medium px-2 py-1 rounded border inline-block`}>
      {risk.charAt(0).toUpperCase() + risk.slice(1)}
    </span>
  );
};

interface StatusBadgeProps {
  status: VulnerabilityStatus;
}

const StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {
  const statusMap = {
    new: {
      color: 'bg-cyber-blue/20 text-cyber-blue border-cyber-blue/30',
      icon: <ClockIcon className="h-3 w-3 mr-1" />,
    },
    verified: {
      color: 'bg-cyber-teal/20 text-cyber-teal border-cyber-teal/30',
      icon: <CheckCircle className="h-3 w-3 mr-1" />,
    },
    fixed: {
      color: 'bg-cyber-green/20 text-cyber-green border-cyber-green/30',
      icon: <CheckCircle className="h-3 w-3 mr-1" />,
    },
    rejected: {
      color: 'bg-cyber-red/20 text-cyber-red border-cyber-red/30',
      icon: <XCircle className="h-3 w-3 mr-1" />,
    },
  };

  const { color, icon } = statusMap[status];

  return (
    <span className={`${color} text-xs font-medium px-2 py-1 rounded border inline-flex items-center`}>
      {icon}
      {status.charAt(0).toUpperCase() + status.slice(1)}
    </span>
  );
};

export default VulnerabilityFeed;
