
import React from 'react';
import { 
  AlertTriangle, 
  Clock, 
  CheckCircle, 
  XCircle, 
  Calendar, 
  Building, 
  User,
  Shield
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Report } from './VulnerabilityFeed';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { format } from 'date-fns';

interface VulnerabilityDetailsProps {
  report: Report;
  onClose: () => void;
  onStatusUpdate?: () => void;
}

const VulnerabilityDetails: React.FC<VulnerabilityDetailsProps> = ({ 
  report, 
  onClose,
  onStatusUpdate
}) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isUpdating, setIsUpdating] = React.useState(false);
  
  // Status display configurations
  const statusMap = {
    new: {
      color: "border-cyber-blue/30 bg-cyber-blue/10",
      icon: <Clock className="h-5 w-5 text-cyber-blue" />,
      text: "New - Under Review",
    },
    verified: {
      color: "border-cyber-teal/30 bg-cyber-teal/10",
      icon: <CheckCircle className="h-5 w-5 text-cyber-teal" />,
      text: "Verified",
    },
    fixed: {
      color: "border-cyber-green/30 bg-cyber-green/10",
      icon: <CheckCircle className="h-5 w-5 text-cyber-green" />,
      text: "Fixed",
    },
    rejected: {
      color: "border-cyber-red/30 bg-cyber-red/10",
      icon: <XCircle className="h-5 w-5 text-cyber-red" />,
      text: "Rejected",
    },
  };
  
  // Risk level color mapping
  const riskColorMap = {
    critical: "text-cyber-red border-cyber-red/30 bg-cyber-red/10",
    high: "text-cyber-orange border-cyber-orange/30 bg-cyber-orange/10",
    medium: "text-cyber-yellow border-cyber-yellow/30 bg-cyber-yellow/10",
    low: "text-cyber-blue border-cyber-blue/30 bg-cyber-blue/10",
    info: "text-cyber-teal border-cyber-teal/30 bg-cyber-teal/10",
  };
  
  const status = report.status as keyof typeof statusMap;
  const { color, icon, text } = statusMap[status] || statusMap.new;
  const riskLevel = report.risk_level as keyof typeof riskColorMap;
  
  const handleStatusUpdate = async (newStatus: 'verified' | 'fixed' | 'rejected') => {
    if (!user) return;
    
    setIsUpdating(true);
    
    try {
      const { error } = await supabase
        .from('reports')
        .update({ status: newStatus })
        .eq('id', report.id);
        
      if (error) throw error;
      
      toast({
        title: "Status Updated",
        description: `Report status has been updated to ${newStatus}`,
      });
      
      if (onStatusUpdate) onStatusUpdate();
    } catch (error: any) {
      console.error('Error updating status:', error);
      toast({
        title: "Update Failed",
        description: error.message || "Failed to update report status",
        variant: "destructive",
      });
    } finally {
      setIsUpdating(false);
    }
  };
  
  return (
    <div className="cyber-panel p-6 max-w-3xl mx-auto">
      <div className="flex justify-between items-start mb-6">
        <h2 className="text-xl font-bold text-white flex items-center">
          <AlertTriangle className="h-6 w-6 text-cyber-teal mr-2" />
          Vulnerability Details
        </h2>
        <Button variant="ghost" className="text-gray-400" onClick={onClose}>
          <XCircle className="h-5 w-5" />
        </Button>
      </div>
      
      <div className="mb-6">
        <h3 className="text-lg font-bold text-white mb-2">{report.title}</h3>
        
        <div className="flex flex-wrap gap-2 mb-4">
          <span className={`px-3 py-1 rounded-md text-sm font-medium ${riskColorMap[riskLevel]}`}>
            {report.risk_level.toUpperCase()}
          </span>
          
          <span className={`px-3 py-1 rounded-md text-sm font-medium flex items-center ${color}`}>
            {icon}
            <span className="ml-1">{text}</span>
          </span>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div className="flex items-center text-gray-300">
            <Building className="h-4 w-4 mr-2 text-cyber-teal" />
            <span className="text-sm">Company: </span>
            <span className="text-white ml-1">{report.company}</span>
          </div>
          
          <div className="flex items-center text-gray-300">
            <User className="h-4 w-4 mr-2 text-cyber-teal" />
            <span className="text-sm">Submitted by: </span>
            <span className="text-white ml-1">{report.submitter_name}</span>
          </div>
          
          <div className="flex items-center text-gray-300">
            <Calendar className="h-4 w-4 mr-2 text-cyber-teal" />
            <span className="text-sm">Submitted on: </span>
            <span className="text-white ml-1">
              {format(new Date(report.created_at), 'MMM d, yyyy')}
            </span>
          </div>
        </div>
        
        <div className="mt-4">
          <h4 className="text-sm font-medium text-gray-300 mb-2">Description</h4>
          <div className="bg-cyber-light/30 p-4 rounded-md border border-cyber-teal/10 text-gray-200 text-sm whitespace-pre-wrap">
            {report.description}
          </div>
        </div>
      </div>
      
      <div className="border-t border-cyber-teal/30 pt-4">
        <h4 className="text-sm font-medium text-gray-300 mb-3">Actions</h4>
        <div className="flex flex-wrap gap-3">
          {report.status === 'new' && (
            <>
              <Button 
                className="bg-cyber-teal hover:bg-cyber-teal/80 text-white"
                onClick={() => handleStatusUpdate('verified')}
                disabled={isUpdating}
              >
                <Shield className="mr-2 h-4 w-4" />
                Verify Vulnerability
              </Button>
              
              <Button 
                variant="outline"
                className="border-cyber-red text-cyber-red hover:bg-cyber-red/10"
                onClick={() => handleStatusUpdate('rejected')}
                disabled={isUpdating}
              >
                <XCircle className="mr-2 h-4 w-4" />
                Reject Report
              </Button>
            </>
          )}
          
          {report.status === 'verified' && (
            <Button 
              className="bg-cyber-green hover:bg-cyber-green/80 text-white"
              onClick={() => handleStatusUpdate('fixed')}
              disabled={isUpdating}
            >
              <CheckCircle className="mr-2 h-4 w-4" />
              Mark as Fixed
            </Button>
          )}
          
          {isUpdating && (
            <span className="text-sm text-gray-400 flex items-center">
              <span className="animate-spin mr-2 h-4 w-4 border-2 border-cyber-teal border-t-transparent rounded-full"></span>
              Updating...
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetails;
